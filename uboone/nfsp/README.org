#+TITLE: WCT Configuration for MicroBooNE Noise-Filtering and Signal Processing

#+html_head_extra: <style>.svgfig {width: 90%; }</style>

* General configuration files

The majority of files in this directory are written to be generic to the WCT application.  A single file, [[../../wirecell.jsonnet][wirecell.jsonnet]] from outside this directory is need.


The general files are:

 - [[./params.jsonnet]] defines some things used elsewhere
 - [[./general.jsonnet]] define some general components (specifically the anode plane object)
 - [[./nf.jsonnet]] configuration specific to noise-filtering components 
 - [[./sp.jsonnet]] configuration specific to signal-processing components 
 - [[./chndb_data.jsonnet]] a big structure defining static information relevant to noise filtering (see below)
 - [[./chndb-resp.jsonnet]] hand-crafted field response functions for quick and dirty deconvolution done inside coherent noise subtraction
 - [[./hf_filters.jsonnet]] and [[./lf_filters.jsonnet]] parameters defining high and low frequency filters used in signal processing


** Channel noise database

The channel noise database configuration (=chndb_data.jsonnet=) needs some extra description.  The comments in the file should be enough to describe the structure but the =channel_info= sub-structure in particular deserves some extra here.  It is an ordered list of /channel info objects/ (CIO):

#+BEGIN_EXAMPLE
  channel_info: [cio1, cio2, cio3, ...]
#+END_EXAMPLE

Each CIO must have a =channels= entry which determines to which channels the rest of the object is applied.  The CIOs are applied in order so that any later CIO may override some value for some channel that had been set by an earlier CIO.  As such, the first CIO can be applied to all channels in order to set some global defaults.

The =channels= to which a CIO may apply can be set in a number of ways:

- =std.range(first,last)= :: function returns a list of numbers in =[first, last]=.  Be cautious that this expansion is *inclusive* of =last= unlike specifying ranges in Python or C++.
- ={wpid: wc.WirePlaneId(wc.Ulayer)}= :: object identifying all channels reading out a given wire plane (aka "layer")
- =<number>= :: scalar explicitly giving a single channel number
- =[<n1>, <n2>, ...]= :: array explicitly listing all required channels

In the case of running WCT in /art/ (more on this below) this file is also re-used in the top-level [[./ubnfsp.jsonnet]] file.  Here, a feature of Jsonnet is used to allow this same data structure to be used and to override the "pure" WCT =OmniChannelNoiseDB= with the LArSoft-aware =wclsChannelNoiseDB= component which itself inherits from =OmniChannelNoiseDB=.  In particular, a local =wcls_nf= is derived from =nf= (imported from [[./nf.jsonnet]]) replacing the =chndb= substructure with one defined here.  That replacement sets a new =type= of =wclsChannelNoiseDB= and defines a =data= which is based on =chndb_data= but then extended to add additional entries specific to =wclsChannelNoiseDB=.  This adds the =misconfig_channel= policy to state that it will use a LArSoft service for this info and supply some missing parameters.  In principle it may also specify a a =bad_channel= policy to use a service to get dynamic bad channel lists, however that would be wrong as the NF determines these
internally.

* Top level files

This directory also includes two examples of top-level WCT config files which connect the "guts" configuration described above to the components which connect them to the application layer (eg, the command line =wire-cell= program or integration into a larger app like /art/).


** Pure WCT

A "pure" =wire-cell= command line job may be given a configuration with [[./magnfsp.jsonnet]] at the top-level.  This will Pull in the "guts" described above as well as configure the job use [[https://github.com/bnlif/magnify][Magnify]] files for input and output.  The file I/O layer is defined just in this top-level file.


** WC/LS

Configuration for WCT to run inside an /art/ job is almost identical to a "pure WCT" configuration except for using [[./ubnfsp.jsonnet]] as the top-level file.

In addition, because the command line program is /art/ a FHiCL fragment must be given to /art/ in order to specify the information that would otherwise be given to the =wire-cell= command line.  The file [[./ubnfsp.fcl]] provides an example of such a FHiCL file which includes the WCT configuration as a "firmware" file (see below).

* Using Configuration Files

Whether the main program is /art/ or /wire-cell/ the user must specify one (or potentially more) top-level configuration files.  As described below there are two ways to provide the "top-level" file, as WCT Jsonnet source or as compiled (and optionally compressed) JSON "firmware".

The examples below assumes something like:

#+BEGIN_EXAMPLE
  mkdir -p /path/to
  cd /path/to
  git clone https://github.com/WireCell/wire-cell-cfg.git
  git clone https://github.com/WireCell/wire-cell-data.git
#+END_EXAMPLE

In general the two resulting directories need to be listed in =WIRECELL_PATH=:

#+BEGIN_EXAMPLE
  $ export WIRECELL_PATH=`pwd`/wire-cell-cfg:`pwd`/wire-cell-data
#+END_EXAMPLE

Although note that when using the "firmware" method to provide configuration described below, only the second is required.

** Specifying configuration file to application

For =wire-cell= command line, top-level configuration files are specified with the =-c= option.

#+BEGIN_EXAMPLE
  $ wire-cell -c top.jsonnet [...]
#+END_EXAMPLE

For /art/, the top-level configuration files are specified by setting the =configs= option of the =wcls_main= art tool configuration:

#+BEGIN_EXAMPLE
  wcls_main: {
     configs: ["top.jsonnet"]
     # ...
  }
#+END_EXAMPLE

Whether the file is specified as a single file or a relative path, its location is searched in the path list held by =WIRECELL_PATH=.

** Configuration source files

Providing configuration as source is simply making available all the Jsonnet files to the application such that they may either be located directly in =WIRECELL_PATH= or such that they may be located relative to one Jsonnet which calls =import= with a relative path.  For example:

#+BEGIN_EXAMPLE
  $ export WIRECELL_PATH=/path/to/wire-cell-cfg:/path/to/wire-cell-data
  $ wire-cell -c uboone/nfsp/magnfsp.jsonnet [...]
#+END_EXAMPLE

** Configuration "firmware" files

The various required Jsonnet files may be "compiled" into a single JSON file which may additionally be compressed.  This bundling is somewhat erroneously called a "firmware" file as it is in a form that can not easily be directly modified but which is very "tidy" to manage as a single "blob" file and efficient for WCT to load.

To "compile" Jsonnet to JSON simply run the =jsonnet= command on the top level Jsonnet file.  Sine the resulting JSON is not in a convenient form to further modify and because WCT supports it, running the output through =bzip2= is recommended.  And, since the result is a single file, there is no longer any need to include a job configuration directory in =WIRECELL_PATH= (the static configuration "data" directory is still needed).

#+BEGIN_EXAMPLE
  $ jsonnet -V noisedb=fnal -V hwnf_epoch=before -J wire-cell-cfg \
    wire-cell-cfg/uboone/nfsp/ubnfsp.jsonnet | bzip2 > ubnfsp-before.json.bz2
  $ cp ubnfsp-before.json.bz2 wire-cell-cfg/uboone/nfsp/*.fcl /path/to/rundir
  $ export WIRECELL_PATH=/path/to/wire-cell-data:/path/to/rundir
  $ cd /path/to/rundir
#+END_EXAMPLE
The =-V hwnf_epoch=before= flag shown above is described in detail in the next section and information on the art FHiCL files following it.

Options:

- =noisedb= :: set how to get the noise information.  The value can be *static* to rely on just info in the Jsonnet.  This is useful for testing on workstation/laptop when FNAL databases can not be reached.  Or it can be *fnal* (really, any value than *static*) to use the FNAL database.
- =hwnf_epoch= :: set which hardware noise fix configuration epoch to assume.  It may take *before*  or *after*.

The name used for the =.json.bz2= file needs to be set in the FHiCL file.  The =ubnfsp-before-hwnf.fcl= has the name from the above example properly hard-coded.  Etc for "after".

See also [[./deploy.sh]].

Note for pure-WCT users: the example above creates a "firmware" file for using WCT inside /art/.  But "firmware" configuration files can also be made for =wire-cell=.  However, as it is common to use Jsonnet's =std.extVar()= to inject input and output file names from the =wire-cell= command line, they must also be specified during "firmware" file "compilation".

#+BEGIN_EXAMPLE
  $ jsonnet -V output=out.root \
            -V input=in.root \
            -V hwnf_epoch=before \
            -V noisedb=static \
            -J wire-cell-cfg \
     wire-cell-cfg/uboone/nfsp/magnfsp.jsonnet \
     | bzip2 > magnfsp.json.bz2
#+END_EXAMPLE

The =-V hwnf_epoch=before= flag shown above is described in more detail in the next section.

** Conditional compilation

In MicroBooNE there are at least two different "configuration" epochs, one before the hardware noise fix and one after.  These two epochs require different sets of "RMS min/max" cuts applied inside the noise filter to determine "bad" channels.  All the rest of the WCT configuration is unchanged between these epochs.  To accommodate this, both sets of parameters are defined but in different files:

 - [[./chndb_before_hwnf.jsonnet]] 
 - [[./chndb_after_hwnf.jsonnet]] 

The "after" set is a bit extra tricky as the RMS min/max cuts must be parameterized by the channel number (as a proxy for wire length).  This is done with "array comprehensions (see [[http://jsonnet.org/docs/tutorial.html][the Jsonnet tutorial]]) over the channel ranges.

In any case, the contents of the desired file are selected by importing 

 - [[./chndb_rmscut.jsonnet]] 

in with the external variable =hwnf_epoch= defined to either =before= or =after=.  Importing this file returns the corresponding array of RMS min/max cuts which is finally appended to the channel info array in

 - [[./chndb_data.jsonnet]]

Then to compile two "firmware" files, one for each epoch simply add a flag to set the =hwnf_epoch= 

#+BEGIN_EXAMPLE
  $ jsonnet -V noisedb=fnal -V hwnf_epoch=before -J wire-cell-cfg \
    wire-cell-cfg/uboone/nfsp/ubnfsp.jsonnet | bzip2 > ubnfsp-before-hwnf.json.bz2
  $ jsonnet -V noisedb=fnal -V hwnf_epoch=after -J wire-cell-cfg \
    wire-cell-cfg/uboone/nfsp/ubnfsp.jsonnet | bzip2 > ubnfsp-after-hwnf.json.bz2
#+END_EXAMPLE


* FHiCL files

The art FHiCL files for configuring art to run WCT NF+SP as well as
non-WCT related code for the purpose of MicroBooNE data production are
kept here for convenience.  

They try to follow [[https://indico.fnal.gov/event/9928/session/6/material/0/7.pdf][Good art Workflow]] so have some structure that
should be understood.  First, there are two short main files which
hold the switch between pre/post hardware fix configuration "epoch":

- [[./ubnfspct-prehwf.fcl]] pre hardware noise fix main FCL
- [[./ubnfspct-posthwf.fcl]] post hardware noise fix main FCL
- [[./ubnfspct-prehwf-static.fcl]] pre hardware noise fix main FCL, using static noise DB (no =fnal.gov= connection needed)
- [[./ubnfspct-posthwf-static.fcl]] pre hardware noise fix main FCL, using static noise DB (no =fnal.gov= connection needed)

These each include a common:

- [[./ubnfspct-generic.fcl]] generic main FCL

but then override just the setting for the actual WCT configuration
file.  The generic file relies on:

- [[./wcls.fcl]] define =physics.producer= config for modules provided by larwirecell 
- FIXME define config for celltree module

An art job might then be run something like:

#+BEGIN_EXAMPLE
  nfsp : {
     module_type : WireCellToolkit
     wcls_main: {
        configs: ["ubnfsp.jsonnet"]
        // only needed if giving .jsonnet instead of pre-compiled .json file
        params: {
           hwnf_epoch: "before",
           noisedb: "fnal"
        }
    }
  }
#+END_EXAMPLE



* Full production job

The figure below shows the parts of a full MicroBooNE NF+SP+Celltree+Butcher production job.

#+ATTR_HTML: :class svgfig
[[file:nfsp-chain.svg]]

To assist in preparing configuration files run [[./deploy.sh]] like

#+BEGIN_EXAMPLE
  ./deploy.sh /path/to/cfgdir
#+END_EXAMPLE

It makes JSON files and copies then and the FHiCL files to the given path.

** NF+SP

The NF+SP part is handled by the =WireCellToolkit= /art/ Module.  It takes about 2 minutes on single core of Xeon E5-2630 v4 @ 2.20GHz and requires a bit more than 3GB peak RAM for 1 event:

#+BEGIN_EXAMPLE
MemReport  VmPeak = 3327.5 VmHWM = 2904.45
#+END_EXAMPLE

Here are the records it produces:

#+BEGIN_EXAMPLE
Swizzler...... | daq........... | ..................... | std::vector<raw::RawDigit> | 8256
DataRecoStage1 | wcNoiseFilter. | ..................... | std::vector<raw::RawDigit> | 8256
ubnfspct...... | nfsp.......... | raw.................. | std::vector<raw::RawDigit> | 8256
ubnfspct...... | nfsp.......... | bad.................. | std::vector<int>.......... | .850
ubnfspct...... | nfsp.......... | wiener............... | std::vector<recob::Wire>.. | 8256
ubnfspct...... | TriggerResults | ..................... | art::TriggerResults....... | ...-
ubnfspct...... | nfsp.......... | threshold............ | std::vector<double>....... | 8256
ubnfspct...... | nfsp.......... | gauss................ | std::vector<recob::Wire>.. | 8256
#+END_EXAMPLE

** NF+SP+Butcher

The event "butcher" takes care of "impedance matching" between what
WCT produces and assumption made by existing MicroBooNE code that
wants to consume its products.  It destroys information by truncating
waveforms (thus "butcher") and it scales signal from WCT's useful
normalization of "number of ionized electrons" to useless and
meaningless (for signal) one "ADC".  

The butcher adds about 30 seconds an no appreciable extra memory.
When it is included with NF+SP the full possible output is:

#+BEGIN_EXAMPLE
Swizzler...... | daq........... | ..................... | std::vector<raw::RawDigit>................ | 8256
DataRecoStage1 | wcNoiseFilter. | ..................... | std::vector<raw::RawDigit>................ | 8256
ubnfspct...... | nfsp.......... | wiener............... | std::vector<recob::Wire>.................. | 8256
ubnfspct...... | butcher....... | truncsig............. | std::vector<recob::Wire>.................. | 8256
ubnfspct...... | butcher....... | rawsigassns.......... | art::Assns<raw::RawDigit,recob::Wire,void> | 8256
ubnfspct...... | nfsp.......... | gauss................ | std::vector<recob::Wire>.................. | 8256
ubnfspct...... | nfsp.......... | threshold............ | std::vector<double>....................... | 8256
ubnfspct...... | nfsp.......... | raw.................. | std::vector<raw::RawDigit>................ | 8256
ubnfspct...... | butcher....... | truncraw............. | std::vector<raw::RawDigit>................ | 8256
ubnfspct...... | TriggerResults | ..................... | art::TriggerResults....................... | ...-
ubnfspct...... | nfsp.......... | bad.................. | std::vector<int>.......................... | .850
#+END_EXAMPLE

This single event file is 106MB.  To save disk space, the overall job
is also configured to drop the useful data WCT and keep only the
butchered.  It also keeps the bad channel list (=bad= of
=vector<int>=) produced by NF.  

#+BEGIN_EXAMPLE
Swizzler.... | daq........... | ..................... | std::vector<raw::RawDigit>................ | ...?
ubnfspct.... | butcher....... | ..................... | std::vector<raw::RawDigit>................ | 8256
ubnfspct.... | butcher....... | ..................... | art::Assns<raw::RawDigit,recob::Wire,void> | 8256
ubnfspct.... | butcher....... | ..................... | std::vector<recob::Wire>.................. | 8256
ubnfspct.... | nfsp.......... | gauss................ | std::vector<recob::Wire>.................. | ...?
ubnfspct.... | nfsp.......... | raw.................. | std::vector<raw::RawDigit>................ | ...?
ubnfspct.... | TriggerResults | ..................... | art::TriggerResults....................... | ...-
ubnfspct.... | nfsp.......... | bad.................. | std::vector<int>.......................... | .850
#+END_EXAMPLE

With the butcher turned on the job takes only 102 seconds, (same
memory usage).  The faster speed is due to saving less data.  This
file is only 19MB.

As the eventual Gauss hit finder apparently can not handle waveform
data with instance names.  This event dump above reflects them being
set to the empty string.

** NF+SP+Celltree+Butcher

Inserted to the final job is the Celltree module to write a special
file which will be used for input to WC 3D imaging code which is still
in the WC prototype.  It will draw from the "pre butchered" data in
addition to PMT data not shown above.
** Fix to save full channel mask maps

Initial try saved only channel mask maps as a simple list of channels as =vector<int>=.  
Later it was understood that full masks are needed in order to be saved by the Celltree module so that downstream WCP imaging can use this info. 
The simple list of channels are kept and a second =vector<int>= is saved which stores a sequential triple of:
#+BEGIN_EXAMPLE
[channel, begin, end,  channel, begin, end, ...]
#+END_EXAMPLE
Where:
- channel :: gives the channel number, same one held in the simple list
- begin :: gives the index into the associated channel waveform of the first tick in the mask
- end :: give one past the index (usual C++ iterator convention) of the last tick in the mask

Take note, as said, the waveform indices are applicable to waveforms
to which the masks are associated.  It's up to the user to keep this
clear.  Here is an example dump now:

#+BEGIN_EXAMPLE
Swizzler.... | daq........... | ..................... | std::vector<raw::RawDigit>................ | ...?
ubnfspct.... | butcher....... | ..................... | std::vector<raw::RawDigit>................ | 8256
ubnfspct.... | nfsp.......... | badchannels.......... | std::vector<int>.......................... | .850
ubnfspct.... | butcher....... | ..................... | art::Assns<raw::RawDigit,recob::Wire,void> | 8256
ubnfspct.... | butcher....... | ..................... | std::vector<recob::Wire>.................. | 8256
ubnfspct.... | nfsp.......... | gauss................ | std::vector<recob::Wire>.................. | ...?
ubnfspct.... | nfsp.......... | raw.................. | std::vector<raw::RawDigit>................ | ...?
ubnfspct.... | TriggerResults | ..................... | art::TriggerResults....................... | ...-
ubnfspct.... | nfsp.......... | badmasks............. | std::vector<int>.......................... | 2550
#+END_EXAMPLE

Note the =badmasks= are of length 3x that of badchannels in this
particular case because there is exactly one mask for each "bad"
channel.  In general, one channel may have multiple masked chunks of
waveform.  

As above, the begin/end numbers in the =badmasks= provide index into
an associated =raw::RawDigit= vector named "=raw=" here and which
happens to be dropped from the output in this example.  As the
remaining =raw::RawDigit= and =recob::Wire= produced by the "butcher"
module are *truncated* these the mask indices do not directly apply.
Knowing how the drop was configured would allow them to still apply.  

In any case, to access the masks one might do something like:

#+BEGIN_SRC c++
  int nch = badmasks.size()/3;
  for (int ind=0; ind<nch; ++ind) {
      const int offset = 3*ind;
      const int ch          = badmasks[offset+0];
      const int begin_index = badmasks[offset+1];
      const int end_index   = badmasks[offset+2];
      // ...
  }
#+END_SRC

Note this packing and duplication is highly weird and kludgey.  The
duplication is so that the job may drop the masks vector after
Celltree saves the data as they are not expected to be needed by the
rest of the MicroBooNE/LArSoft world.  The silly 3x packing is to
avoid creating a new, proper /art/ data product with more explicit
structure.
