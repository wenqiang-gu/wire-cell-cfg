BEGIN_PROLOG

wcls: {
   nfspl1 : {
      module_type : WireCellToolkit
      wcls_main: {
         tool_type: WCLS
         apps: ["Pgrapher"]

         // Libraries in which to look for WCT components
         plugins: ["WireCellGen", "WireCellSigProc", "WireCellSio", "WireCellPgraph", "WireCellLarsoft"]

         // The tool marshals the art::Event to these visitors before
         inputers: ["wclsRawFrameSource", "wclsMultiChannelNoiseDB"]
         // or after the WCT app is run.
         outputers: ["wclsFrameSaver:nfsaver", "wclsFrameSaver:thsaver", "wclsFrameSaver:spsaver"]

         // This is relative to the wire-cell-cfg directory.  If the
         // "uboone/nfspl1/" part is split out by itself, just make
         // sure to still have around the top level cfg/*.jsonnet files.
         configs: ["uboone/nfspl1/uboone-nfspl1.jsonnet"]

         // Allow setting of select WCT parameters as
         //   key <--> scalar
         // value pairs.  Acceptable keys depend on how the Jsonnet
         // files given in "configs" are written.  The Jsonnet will
         // access the key via a call to the std.extVar(key) function.
         // An entry is equivalent to one "-V" option to wire-cell CLI.
         params : {
            // key1: "value"
            // key2: 42
         }

         // Allow setting of select WCT parameters as
         //   key <--> structure
         // value pairs.  The structure is in the form of Jsonnet text.
         // Acceptable keys depend on how the
         // Jsonnet files given in "configs" are written.  The Jsonnet
         // will access the key via a call to the std.extVar(key)
         // function.  
         // An entry is equivalent to one "-C" option to wire-cell CLI.
         structs: {
            // run with dynamic RMS cuts based on run and with larsoft
            // services for misconfigured channels
            // override: "{noisedb:{epoch:\"multi\", flavor:\"wcls\", run12boundary:7000}}"

            // Run without services
            override: "{noisedb:{epoch:\"multi\", flavor:\"wct\", run12boundary:7000}}"
         }
      }
   }

   # This rewrites existing raw::RawDigit and recob::Wire
   # collections in order to truncate and scale them.  This is not
   # WCT related but happens to run generic art modules currently
   # living in larwirecell.  The intention is to satisfy
   # assumptions made by legacy code.
   butcher : {
      module_type : "EventButcher"

      inRawTag: "nfspl1:raw:"
      inSigTag: "nfspl1:gauss:"

      # apparently downstream code is too brittle to handle giving
      # any instance names.

      outRawTag: ""
      outSigTag: ""
      outAssnTag: ""

      # throw away perfectly cromulent data.  very dubious but
      # that's what (non WC) people want.

      ndrop: 2400
      nkeep: 6400

      # match some arbitrary and inexplicable "ADC" charge scale
      # instead of number of ionized electrons.

      sigscale: 0.005
   }
   

}

END_PROLOG
